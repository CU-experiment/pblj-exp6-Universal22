Write a Java program to process a large dataset of products using streams. Perform operations such as grouping products by category, finding the most expensive product in each category, and calculating the average price of all products.
Code:
import java.util.*;
import java.util.stream.Collectors;
class Product {
    private String name;
    private String category;
    private double price;
    public Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }
    public String getName() { return name; }
    public String getCategory() { return category; }
    public double getPrice() { return price; }
    @Override
    public String toString() {
        return "Product{name='" + name + "', category='" + category + "', price=" + price + "}";
    }
}
public class ProductStreamOperations {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", "Electronics", 80000),
            new Product("Smartphone", "Electronics", 60000),
            new Product("Headphones", "Electronics", 3000),
            new Product("Refrigerator", "Appliances", 50000),
            new Product("Washing Machine", "Appliances", 40000),
            new Product("Mixer Grinder", "Appliances", 5000),
            new Product("T-shirt", "Clothing", 1500),
            new Product("Jeans", "Clothing", 2500),
            new Product("Jacket", "Clothing", 5000)
        );
        Map<String, List<Product>> productsByCategory = products.stream()
                .collect(Collectors.groupingBy(Product::getCategory));
        System.out.println("Products grouped by category:");
        productsByCategory.forEach((category, productList) -> {
            System.out.println(category + ": " + productList);
        });
        Map<String, Optional<Product>> mostExpensiveByCategory = products.stream()
                .collect(Collectors.groupingBy(
                        Product::getCategory, 
                        Collectors.maxBy(Comparator.comparingDouble(Product::getPrice))
                ));
        System.out.println("\nMost expensive product in each category:");
        mostExpensiveByCategory.forEach((category, product) ->
                System.out.println(category + ": " + product.get().getName() + " (₹" + product.get().getPrice() + ")"));
        double averagePrice = products.stream()
                .mapToDouble(Product::getPrice)
                .average()
                .orElse(0.0);
        System.out.println("\nAverage price of all products: ₹" + averagePrice);
 }
}
